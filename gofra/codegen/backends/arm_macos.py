from datetime import datetime
from typing import IO, assert_never

from gofra.parser.intrinsics import Intrinsic
from gofra.parser.operators import Operator, OperatorType


def translate_assembly_arm_macos(fd: IO[str], operators: list[Operator]) -> None:
    _write_generated_header(fd)

    idx = 0
    idx_end = len(operators)
    while idx < idx_end:
        operator = operators[idx]

        match operator.type:
            case OperatorType.PUSH_FLOAT:
                raise NotImplementedError
            case OperatorType.PUSH_INTEGER:
                fd.write("sub SP, SP, #16\n")
                fd.write(f"mov X0, #{operator.operand}\n")
                fd.write("str X0, [SP]\n")
            case OperatorType.PUSH_STRING:
                raise NotImplementedError
            case OperatorType.PUSH_SYMBOL:
                fd.write("sub SP, SP, #16\n")
                fd.write(f"mov X0, #{operator.operand}\n")
                fd.write("str X0, [SP]\n")

            case OperatorType.INTRINSIC:
                assert isinstance(operator.operand, Intrinsic)
                match operator.operand:
                    case Intrinsic.FREE:
                        fd.write("\tadd SP, SP, #16\n")
                    case _:
                        raise NotImplementedError
                        # assert_never(operator.operand)
            case OperatorType.WHILE:
                raise NotImplementedError
            case OperatorType.IF:
                raise NotImplementedError
            case OperatorType.DO:
                raise NotImplementedError
            case OperatorType.END:
                raise NotImplementedError
            case OperatorType.ELSE:
                raise NotImplementedError
            case _:
                assert_never(operator.type)

        idx += 1

    fd.write("\tmov X0, #0\n")
    fd.write("\tmov X16, #1\n")
    fd.write("\tsvc #0\n")


def _write_generated_header(fd: IO[str]) -> None:
    fd.write(f"""
// Assembly generated by Gofra translator
// GENERATED AT: {datetime.now()}
// TARGET ARCH: ARM
// TARGET OS: MACOS

.global _start
.align 4

_start:
""")
